#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Organization:
  """
  Attributes:
   - fullName
   - shortName
   - address
   - infisCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fullName', None, None, ), # 1
    (2, TType.STRING, 'shortName', None, None, ), # 2
    (3, TType.STRING, 'address', None, None, ), # 3
    (4, TType.STRING, 'infisCode', None, None, ), # 4
  )

  def __init__(self, fullName=None, shortName=None, address=None, infisCode=None,):
    self.fullName = fullName
    self.shortName = shortName
    self.address = address
    self.infisCode = infisCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fullName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.shortName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.infisCode = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Organization')
    if self.fullName is not None:
      oprot.writeFieldBegin('fullName', TType.STRING, 1)
      oprot.writeString(self.fullName)
      oprot.writeFieldEnd()
    if self.shortName is not None:
      oprot.writeFieldBegin('shortName', TType.STRING, 2)
      oprot.writeString(self.shortName)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 3)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.infisCode is not None:
      oprot.writeFieldBegin('infisCode', TType.STRING, 4)
      oprot.writeString(self.infisCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.fullName is None:
      raise TProtocol.TProtocolException(message='Required field fullName is unset!')
    if self.infisCode is None:
      raise TProtocol.TProtocolException(message='Required field infisCode is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrgStructure:
  """
  Attributes:
   - id
   - parent_id
   - code
   - name
   - address
   - sexFilter
   - ageFilter
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'parent_id', None, 0, ), # 2
    (3, TType.STRING, 'code', None, None, ), # 3
    (4, TType.STRING, 'name', None, "", ), # 4
    (5, TType.STRING, 'address', None, "", ), # 5
    (6, TType.STRING, 'sexFilter', None, "", ), # 6
    (7, TType.STRING, 'ageFilter', None, "", ), # 7
  )

  def __init__(self, id=None, parent_id=thrift_spec[2][4], code=None, name=thrift_spec[4][4], address=thrift_spec[5][4], sexFilter=thrift_spec[6][4], ageFilter=thrift_spec[7][4],):
    self.id = id
    self.parent_id = parent_id
    self.code = code
    self.name = name
    self.address = address
    self.sexFilter = sexFilter
    self.ageFilter = ageFilter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.parent_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sexFilter = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.ageFilter = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrgStructure')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.parent_id is not None:
      oprot.writeFieldBegin('parent_id', TType.I32, 2)
      oprot.writeI32(self.parent_id)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 3)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 5)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.sexFilter is not None:
      oprot.writeFieldBegin('sexFilter', TType.STRING, 6)
      oprot.writeString(self.sexFilter)
      oprot.writeFieldEnd()
    if self.ageFilter is not None:
      oprot.writeFieldBegin('ageFilter', TType.STRING, 7)
      oprot.writeString(self.ageFilter)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Person:
  """
  Attributes:
   - id
   - code
   - orgStructureId
   - lastName
   - firstName
   - patrName
   - office
   - speciality
   - specialityOKSOCode
   - specialityRegionalCode
   - post
   - SexFilter
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'code', None, None, ), # 2
    (3, TType.I32, 'orgStructureId', None, None, ), # 3
    (4, TType.STRING, 'lastName', None, None, ), # 4
    (5, TType.STRING, 'firstName', None, None, ), # 5
    (6, TType.STRING, 'patrName', None, None, ), # 6
    (7, TType.STRING, 'office', None, None, ), # 7
    (8, TType.STRING, 'speciality', None, None, ), # 8
    (9, TType.STRING, 'specialityOKSOCode', None, None, ), # 9
    (10, TType.STRING, 'specialityRegionalCode', None, None, ), # 10
    (11, TType.STRING, 'post', None, None, ), # 11
    (12, TType.STRING, 'SexFilter', None, None, ), # 12
  )

  def __init__(self, id=None, code=None, orgStructureId=None, lastName=None, firstName=None, patrName=None, office=None, speciality=None, specialityOKSOCode=None, specialityRegionalCode=None, post=None, SexFilter=None,):
    self.id = id
    self.code = code
    self.orgStructureId = orgStructureId
    self.lastName = lastName
    self.firstName = firstName
    self.patrName = patrName
    self.office = office
    self.speciality = speciality
    self.specialityOKSOCode = specialityOKSOCode
    self.specialityRegionalCode = specialityRegionalCode
    self.post = post
    self.SexFilter = SexFilter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.orgStructureId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.patrName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.office = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.speciality = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.specialityOKSOCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.specialityRegionalCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.post = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.SexFilter = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Person')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 2)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.orgStructureId is not None:
      oprot.writeFieldBegin('orgStructureId', TType.I32, 3)
      oprot.writeI32(self.orgStructureId)
      oprot.writeFieldEnd()
    if self.lastName is not None:
      oprot.writeFieldBegin('lastName', TType.STRING, 4)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.firstName is not None:
      oprot.writeFieldBegin('firstName', TType.STRING, 5)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.patrName is not None:
      oprot.writeFieldBegin('patrName', TType.STRING, 6)
      oprot.writeString(self.patrName)
      oprot.writeFieldEnd()
    if self.office is not None:
      oprot.writeFieldBegin('office', TType.STRING, 7)
      oprot.writeString(self.office)
      oprot.writeFieldEnd()
    if self.speciality is not None:
      oprot.writeFieldBegin('speciality', TType.STRING, 8)
      oprot.writeString(self.speciality)
      oprot.writeFieldEnd()
    if self.specialityOKSOCode is not None:
      oprot.writeFieldBegin('specialityOKSOCode', TType.STRING, 9)
      oprot.writeString(self.specialityOKSOCode)
      oprot.writeFieldEnd()
    if self.specialityRegionalCode is not None:
      oprot.writeFieldBegin('specialityRegionalCode', TType.STRING, 10)
      oprot.writeString(self.specialityRegionalCode)
      oprot.writeFieldEnd()
    if self.post is not None:
      oprot.writeFieldBegin('post', TType.STRING, 11)
      oprot.writeString(self.post)
      oprot.writeFieldEnd()
    if self.SexFilter is not None:
      oprot.writeFieldBegin('SexFilter', TType.STRING, 12)
      oprot.writeString(self.SexFilter)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Ticket:
  """
  Attributes:
   - time
   - free
   - available
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'time', None, None, ), # 1
    (2, TType.I32, 'free', None, None, ), # 2
    (3, TType.I32, 'available', None, None, ), # 3
  )

  def __init__(self, time=None, free=None, available=None,):
    self.time = time
    self.free = free
    self.available = available

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.free = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.available = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Ticket')
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 1)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    if self.free is not None:
      oprot.writeFieldBegin('free', TType.I32, 2)
      oprot.writeI32(self.free)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I32, 3)
      oprot.writeI32(self.available)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TicketsAvailability:
  """
  Attributes:
   - total
   - free
   - available
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.I32, 'free', None, None, ), # 2
    (3, TType.I32, 'available', None, None, ), # 3
  )

  def __init__(self, total=None, free=None, available=None,):
    self.total = total
    self.free = free
    self.available = available

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.free = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.available = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TicketsAvailability')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.free is not None:
      oprot.writeFieldBegin('free', TType.I32, 2)
      oprot.writeI32(self.free)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I32, 3)
      oprot.writeI32(self.available)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.total is None:
      raise TProtocol.TProtocolException(message='Required field total is unset!')
    if self.free is None:
      raise TProtocol.TProtocolException(message='Required field free is unset!')
    if self.available is None:
      raise TProtocol.TProtocolException(message='Required field available is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtendedTicketsAvailability:
  """
  Attributes:
   - personId
   - date
   - ticketsInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'personId', None, None, ), # 1
    (2, TType.I64, 'date', None, None, ), # 2
    (3, TType.STRUCT, 'ticketsInfo', (TicketsAvailability, TicketsAvailability.thrift_spec), None, ), # 3
  )

  def __init__(self, personId=None, date=None, ticketsInfo=None,):
    self.personId = personId
    self.date = date
    self.ticketsInfo = ticketsInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.personId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ticketsInfo = TicketsAvailability()
          self.ticketsInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtendedTicketsAvailability')
    if self.personId is not None:
      oprot.writeFieldBegin('personId', TType.I32, 1)
      oprot.writeI32(self.personId)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.I64, 2)
      oprot.writeI64(self.date)
      oprot.writeFieldEnd()
    if self.ticketsInfo is not None:
      oprot.writeFieldBegin('ticketsInfo', TType.STRUCT, 3)
      self.ticketsInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.personId is None:
      raise TProtocol.TProtocolException(message='Required field personId is unset!')
    if self.ticketsInfo is None:
      raise TProtocol.TProtocolException(message='Required field ticketsInfo is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Amb:
  """
  Attributes:
   - begTime
   - endTime
   - office
   - plan
   - tickets
   - available
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'begTime', None, None, ), # 1
    (2, TType.I64, 'endTime', None, None, ), # 2
    (3, TType.STRING, 'office', None, None, ), # 3
    (4, TType.STRING, 'plan', None, None, ), # 4
    (5, TType.LIST, 'tickets', (TType.STRUCT,(Ticket, Ticket.thrift_spec)), None, ), # 5
    (6, TType.I32, 'available', None, None, ), # 6
  )

  def __init__(self, begTime=None, endTime=None, office=None, plan=None, tickets=None, available=None,):
    self.begTime = begTime
    self.endTime = endTime
    self.office = office
    self.plan = plan
    self.tickets = tickets
    self.available = available

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.begTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.office = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.plan = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.tickets = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Ticket()
            _elem5.read(iprot)
            self.tickets.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.available = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Amb')
    if self.begTime is not None:
      oprot.writeFieldBegin('begTime', TType.I64, 1)
      oprot.writeI64(self.begTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 2)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    if self.office is not None:
      oprot.writeFieldBegin('office', TType.STRING, 3)
      oprot.writeString(self.office)
      oprot.writeFieldEnd()
    if self.plan is not None:
      oprot.writeFieldBegin('plan', TType.STRING, 4)
      oprot.writeString(self.plan)
      oprot.writeFieldEnd()
    if self.tickets is not None:
      oprot.writeFieldBegin('tickets', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.tickets))
      for iter6 in self.tickets:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I32, 6)
      oprot.writeI32(self.available)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PatientStatus:
  """
  Attributes:
   - success
   - message
   - patientId
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'success', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
    (3, TType.I32, 'patientId', None, None, ), # 3
  )

  def __init__(self, success=None, message=None, patientId=None,):
    self.success = success
    self.message = message
    self.patientId = patientId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PatientStatus')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 1)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 3)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.success is None:
      raise TProtocol.TProtocolException(message='Required field success is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PatientInfo:
  """
  Attributes:
   - lastName
   - firstName
   - patrName
   - birthDate
   - sex
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'lastName', None, None, ), # 1
    (2, TType.STRING, 'firstName', None, None, ), # 2
    (3, TType.STRING, 'patrName', None, None, ), # 3
    (4, TType.I64, 'birthDate', None, None, ), # 4
    (5, TType.I32, 'sex', None, None, ), # 5
  )

  def __init__(self, lastName=None, firstName=None, patrName=None, birthDate=None, sex=None,):
    self.lastName = lastName
    self.firstName = firstName
    self.patrName = patrName
    self.birthDate = birthDate
    self.sex = sex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.patrName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.birthDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.sex = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PatientInfo')
    if self.lastName is not None:
      oprot.writeFieldBegin('lastName', TType.STRING, 1)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.firstName is not None:
      oprot.writeFieldBegin('firstName', TType.STRING, 2)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.patrName is not None:
      oprot.writeFieldBegin('patrName', TType.STRING, 3)
      oprot.writeString(self.patrName)
      oprot.writeFieldEnd()
    if self.birthDate is not None:
      oprot.writeFieldBegin('birthDate', TType.I64, 4)
      oprot.writeI64(self.birthDate)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I32, 5)
      oprot.writeI32(self.sex)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrgStructuresProperties:
  """
  Attributes:
   - orgStructureId
   - attached
   - matchRegAddress
   - matchLocAddress
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'orgStructureId', None, None, ), # 1
    (2, TType.BOOL, 'attached', None, None, ), # 2
    (3, TType.BOOL, 'matchRegAddress', None, None, ), # 3
    (4, TType.BOOL, 'matchLocAddress', None, None, ), # 4
  )

  def __init__(self, orgStructureId=None, attached=None, matchRegAddress=None, matchLocAddress=None,):
    self.orgStructureId = orgStructureId
    self.attached = attached
    self.matchRegAddress = matchRegAddress
    self.matchLocAddress = matchLocAddress

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.orgStructureId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.attached = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.matchRegAddress = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.matchLocAddress = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrgStructuresProperties')
    if self.orgStructureId is not None:
      oprot.writeFieldBegin('orgStructureId', TType.I32, 1)
      oprot.writeI32(self.orgStructureId)
      oprot.writeFieldEnd()
    if self.attached is not None:
      oprot.writeFieldBegin('attached', TType.BOOL, 2)
      oprot.writeBool(self.attached)
      oprot.writeFieldEnd()
    if self.matchRegAddress is not None:
      oprot.writeFieldBegin('matchRegAddress', TType.BOOL, 3)
      oprot.writeBool(self.matchRegAddress)
      oprot.writeFieldEnd()
    if self.matchLocAddress is not None:
      oprot.writeFieldBegin('matchLocAddress', TType.BOOL, 4)
      oprot.writeBool(self.matchLocAddress)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.orgStructureId is None:
      raise TProtocol.TProtocolException(message='Required field orgStructureId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EnqueuePatientStatus:
  """
  Attributes:
   - success
   - message
   - index
   - queueId
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'success', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
    (3, TType.I32, 'index', None, None, ), # 3
    (4, TType.I32, 'queueId', None, None, ), # 4
  )

  def __init__(self, success=None, message=None, index=None, queueId=None,):
    self.success = success
    self.message = message
    self.index = index
    self.queueId = queueId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.queueId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EnqueuePatientStatus')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 1)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I32, 3)
      oprot.writeI32(self.index)
      oprot.writeFieldEnd()
    if self.queueId is not None:
      oprot.writeFieldBegin('queueId', TType.I32, 4)
      oprot.writeI32(self.queueId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.success is None:
      raise TProtocol.TProtocolException(message='Required field success is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Queue:
  """
  Attributes:
   - dateTime
   - index
   - personId
   - note
   - queueId
   - enqueuePersonId
   - enqueueDateTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dateTime', None, None, ), # 1
    (2, TType.I32, 'index', None, None, ), # 2
    (3, TType.I32, 'personId', None, None, ), # 3
    (4, TType.STRING, 'note', None, None, ), # 4
    (5, TType.I32, 'queueId', None, None, ), # 5
    (6, TType.I32, 'enqueuePersonId', None, None, ), # 6
    (7, TType.I64, 'enqueueDateTime', None, None, ), # 7
  )

  def __init__(self, dateTime=None, index=None, personId=None, note=None, queueId=None, enqueuePersonId=None, enqueueDateTime=None,):
    self.dateTime = dateTime
    self.index = index
    self.personId = personId
    self.note = note
    self.queueId = queueId
    self.enqueuePersonId = enqueuePersonId
    self.enqueueDateTime = enqueueDateTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.personId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.note = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.queueId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.enqueuePersonId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.enqueueDateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Queue')
    if self.dateTime is not None:
      oprot.writeFieldBegin('dateTime', TType.I64, 1)
      oprot.writeI64(self.dateTime)
      oprot.writeFieldEnd()
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I32, 2)
      oprot.writeI32(self.index)
      oprot.writeFieldEnd()
    if self.personId is not None:
      oprot.writeFieldBegin('personId', TType.I32, 3)
      oprot.writeI32(self.personId)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 4)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    if self.queueId is not None:
      oprot.writeFieldBegin('queueId', TType.I32, 5)
      oprot.writeI32(self.queueId)
      oprot.writeFieldEnd()
    if self.enqueuePersonId is not None:
      oprot.writeFieldBegin('enqueuePersonId', TType.I32, 6)
      oprot.writeI32(self.enqueuePersonId)
      oprot.writeFieldEnd()
    if self.enqueueDateTime is not None:
      oprot.writeFieldBegin('enqueueDateTime', TType.I64, 7)
      oprot.writeI64(self.enqueueDateTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DequeuePatientStatus:
  """
  Attributes:
   - success
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'success', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, success=None, message=None,):
    self.success = success
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DequeuePatientStatus')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 1)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.success is None:
      raise TProtocol.TProtocolException(message='Required field success is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Speciality:
  """
  Attributes:
   - ticketsPerMonths
   - ticketsAvailable
   - speciality
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ticketsPerMonths', None, None, ), # 1
    (2, TType.I32, 'ticketsAvailable', None, None, ), # 2
    (3, TType.STRING, 'speciality', None, None, ), # 3
  )

  def __init__(self, ticketsPerMonths=None, ticketsAvailable=None, speciality=None,):
    self.ticketsPerMonths = ticketsPerMonths
    self.ticketsAvailable = ticketsAvailable
    self.speciality = speciality

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ticketsPerMonths = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ticketsAvailable = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.speciality = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Speciality')
    if self.ticketsPerMonths is not None:
      oprot.writeFieldBegin('ticketsPerMonths', TType.I32, 1)
      oprot.writeI32(self.ticketsPerMonths)
      oprot.writeFieldEnd()
    if self.ticketsAvailable is not None:
      oprot.writeFieldBegin('ticketsAvailable', TType.I32, 2)
      oprot.writeI32(self.ticketsAvailable)
      oprot.writeFieldEnd()
    if self.speciality is not None:
      oprot.writeFieldBegin('speciality', TType.STRING, 3)
      oprot.writeString(self.speciality)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Address:
  """
  Attributes:
   - orgStructureId
   - pointKLADR
   - streetKLADR
   - number
   - corpus
   - firstFlat
   - lastFlat
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'orgStructureId', None, None, ), # 1
    (2, TType.STRING, 'pointKLADR', None, None, ), # 2
    (3, TType.STRING, 'streetKLADR', None, None, ), # 3
    (4, TType.STRING, 'number', None, None, ), # 4
    (5, TType.STRING, 'corpus', None, None, ), # 5
    (6, TType.I32, 'firstFlat', None, None, ), # 6
    (7, TType.I32, 'lastFlat', None, None, ), # 7
  )

  def __init__(self, orgStructureId=None, pointKLADR=None, streetKLADR=None, number=None, corpus=None, firstFlat=None, lastFlat=None,):
    self.orgStructureId = orgStructureId
    self.pointKLADR = pointKLADR
    self.streetKLADR = streetKLADR
    self.number = number
    self.corpus = corpus
    self.firstFlat = firstFlat
    self.lastFlat = lastFlat

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.orgStructureId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pointKLADR = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.streetKLADR = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.number = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.corpus = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.firstFlat = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.lastFlat = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Address')
    if self.orgStructureId is not None:
      oprot.writeFieldBegin('orgStructureId', TType.I32, 1)
      oprot.writeI32(self.orgStructureId)
      oprot.writeFieldEnd()
    if self.pointKLADR is not None:
      oprot.writeFieldBegin('pointKLADR', TType.STRING, 2)
      oprot.writeString(self.pointKLADR)
      oprot.writeFieldEnd()
    if self.streetKLADR is not None:
      oprot.writeFieldBegin('streetKLADR', TType.STRING, 3)
      oprot.writeString(self.streetKLADR)
      oprot.writeFieldEnd()
    if self.number is not None:
      oprot.writeFieldBegin('number', TType.STRING, 4)
      oprot.writeString(self.number)
      oprot.writeFieldEnd()
    if self.corpus is not None:
      oprot.writeFieldBegin('corpus', TType.STRING, 5)
      oprot.writeString(self.corpus)
      oprot.writeFieldEnd()
    if self.firstFlat is not None:
      oprot.writeFieldBegin('firstFlat', TType.I32, 6)
      oprot.writeI32(self.firstFlat)
      oprot.writeFieldEnd()
    if self.lastFlat is not None:
      oprot.writeFieldBegin('lastFlat', TType.I32, 7)
      oprot.writeI32(self.lastFlat)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.orgStructureId is None:
      raise TProtocol.TProtocolException(message='Required field orgStructureId is unset!')
    if self.pointKLADR is None:
      raise TProtocol.TProtocolException(message='Required field pointKLADR is unset!')
    if self.streetKLADR is None:
      raise TProtocol.TProtocolException(message='Required field streetKLADR is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Contact:
  """
  Attributes:
   - type
   - code
   - contact
   - note
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.STRING, 'code', None, None, ), # 2
    (3, TType.STRING, 'contact', None, None, ), # 3
    (4, TType.STRING, 'note', None, None, ), # 4
  )

  def __init__(self, type=None, code=None, contact=None, note=None,):
    self.type = type
    self.code = code
    self.contact = contact
    self.note = note

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.contact = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.note = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Contact')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 2)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.contact is not None:
      oprot.writeFieldBegin('contact', TType.STRING, 3)
      oprot.writeString(self.contact)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 4)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FindOrgStructureByAddressParameters:
  """
  Attributes:
   - pointKLADR
   - streetKLADR
   - number
   - corpus
   - flat
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'pointKLADR', None, None, ), # 1
    (2, TType.STRING, 'streetKLADR', None, "", ), # 2
    (3, TType.STRING, 'number', None, "", ), # 3
    (4, TType.STRING, 'corpus', None, "", ), # 4
    (5, TType.I32, 'flat', None, 0, ), # 5
  )

  def __init__(self, pointKLADR=None, streetKLADR=thrift_spec[2][4], number=thrift_spec[3][4], corpus=thrift_spec[4][4], flat=thrift_spec[5][4],):
    self.pointKLADR = pointKLADR
    self.streetKLADR = streetKLADR
    self.number = number
    self.corpus = corpus
    self.flat = flat

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.pointKLADR = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.streetKLADR = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.number = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.corpus = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.flat = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FindOrgStructureByAddressParameters')
    if self.pointKLADR is not None:
      oprot.writeFieldBegin('pointKLADR', TType.STRING, 1)
      oprot.writeString(self.pointKLADR)
      oprot.writeFieldEnd()
    if self.streetKLADR is not None:
      oprot.writeFieldBegin('streetKLADR', TType.STRING, 2)
      oprot.writeString(self.streetKLADR)
      oprot.writeFieldEnd()
    if self.number is not None:
      oprot.writeFieldBegin('number', TType.STRING, 3)
      oprot.writeString(self.number)
      oprot.writeFieldEnd()
    if self.corpus is not None:
      oprot.writeFieldBegin('corpus', TType.STRING, 4)
      oprot.writeString(self.corpus)
      oprot.writeFieldEnd()
    if self.flat is not None:
      oprot.writeFieldBegin('flat', TType.I32, 5)
      oprot.writeI32(self.flat)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.pointKLADR is None:
      raise TProtocol.TProtocolException(message='Required field pointKLADR is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetTicketsAvailabilityParameters:
  """
  Attributes:
   - orgStructureId
   - recursive
   - specialityNotation
   - speciality
   - personId
   - begDate
   - endDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'orgStructureId', None, None, ), # 1
    (2, TType.BOOL, 'recursive', None, None, ), # 2
    (3, TType.STRING, 'specialityNotation', None, None, ), # 3
    (4, TType.STRING, 'speciality', None, None, ), # 4
    (5, TType.I32, 'personId', None, None, ), # 5
    (6, TType.I64, 'begDate', None, None, ), # 6
    (7, TType.I64, 'endDate', None, None, ), # 7
  )

  def __init__(self, orgStructureId=None, recursive=None, specialityNotation=None, speciality=None, personId=None, begDate=None, endDate=None,):
    self.orgStructureId = orgStructureId
    self.recursive = recursive
    self.specialityNotation = specialityNotation
    self.speciality = speciality
    self.personId = personId
    self.begDate = begDate
    self.endDate = endDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.orgStructureId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.recursive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.specialityNotation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.speciality = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.personId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.begDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.endDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetTicketsAvailabilityParameters')
    if self.orgStructureId is not None:
      oprot.writeFieldBegin('orgStructureId', TType.I32, 1)
      oprot.writeI32(self.orgStructureId)
      oprot.writeFieldEnd()
    if self.recursive is not None:
      oprot.writeFieldBegin('recursive', TType.BOOL, 2)
      oprot.writeBool(self.recursive)
      oprot.writeFieldEnd()
    if self.specialityNotation is not None:
      oprot.writeFieldBegin('specialityNotation', TType.STRING, 3)
      oprot.writeString(self.specialityNotation)
      oprot.writeFieldEnd()
    if self.speciality is not None:
      oprot.writeFieldBegin('speciality', TType.STRING, 4)
      oprot.writeString(self.speciality)
      oprot.writeFieldEnd()
    if self.personId is not None:
      oprot.writeFieldBegin('personId', TType.I32, 5)
      oprot.writeI32(self.personId)
      oprot.writeFieldEnd()
    if self.begDate is not None:
      oprot.writeFieldBegin('begDate', TType.I64, 6)
      oprot.writeI64(self.begDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.I64, 7)
      oprot.writeI64(self.endDate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.orgStructureId is None:
      raise TProtocol.TProtocolException(message='Required field orgStructureId is unset!')
    if self.personId is None:
      raise TProtocol.TProtocolException(message='Required field personId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetTimeWorkAndStatusParameters:
  """
  Attributes:
   - hospitalUidFrom
   - personId
   - date
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hospitalUidFrom', None, None, ), # 1
    (2, TType.I32, 'personId', None, None, ), # 2
    (3, TType.I64, 'date', None, None, ), # 3
  )

  def __init__(self, hospitalUidFrom=None, personId=None, date=None,):
    self.hospitalUidFrom = hospitalUidFrom
    self.personId = personId
    self.date = date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hospitalUidFrom = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.personId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.date = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetTimeWorkAndStatusParameters')
    if self.hospitalUidFrom is not None:
      oprot.writeFieldBegin('hospitalUidFrom', TType.I32, 1)
      oprot.writeI32(self.hospitalUidFrom)
      oprot.writeFieldEnd()
    if self.personId is not None:
      oprot.writeFieldBegin('personId', TType.I32, 2)
      oprot.writeI32(self.personId)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.I64, 3)
      oprot.writeI64(self.date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.personId is None:
      raise TProtocol.TProtocolException(message='Required field personId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddPatientParameters:
  """
  Attributes:
   - lastName
   - firstName
   - patrName
   - birthDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'lastName', None, None, ), # 1
    (2, TType.STRING, 'firstName', None, None, ), # 2
    (3, TType.STRING, 'patrName', None, None, ), # 3
    (4, TType.I64, 'birthDate', None, None, ), # 4
  )

  def __init__(self, lastName=None, firstName=None, patrName=None, birthDate=None,):
    self.lastName = lastName
    self.firstName = firstName
    self.patrName = patrName
    self.birthDate = birthDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.patrName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.birthDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddPatientParameters')
    if self.lastName is not None:
      oprot.writeFieldBegin('lastName', TType.STRING, 1)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.firstName is not None:
      oprot.writeFieldBegin('firstName', TType.STRING, 2)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.patrName is not None:
      oprot.writeFieldBegin('patrName', TType.STRING, 3)
      oprot.writeString(self.patrName)
      oprot.writeFieldEnd()
    if self.birthDate is not None:
      oprot.writeFieldBegin('birthDate', TType.I64, 4)
      oprot.writeI64(self.birthDate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EnqueuePatientParameters:
  """
  Attributes:
   - patientId
   - personId
   - dateTime
   - note
   - hospitalUidFrom
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'patientId', None, None, ), # 1
    (2, TType.I32, 'personId', None, None, ), # 2
    (3, TType.I64, 'dateTime', None, None, ), # 3
    (4, TType.STRING, 'note', None, None, ), # 4
    (5, TType.I32, 'hospitalUidFrom', None, None, ), # 5
  )

  def __init__(self, patientId=None, personId=None, dateTime=None, note=None, hospitalUidFrom=None,):
    self.patientId = patientId
    self.personId = personId
    self.dateTime = dateTime
    self.note = note
    self.hospitalUidFrom = hospitalUidFrom

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.personId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.dateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.note = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hospitalUidFrom = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EnqueuePatientParameters')
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 1)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    if self.personId is not None:
      oprot.writeFieldBegin('personId', TType.I32, 2)
      oprot.writeI32(self.personId)
      oprot.writeFieldEnd()
    if self.dateTime is not None:
      oprot.writeFieldBegin('dateTime', TType.I64, 3)
      oprot.writeI64(self.dateTime)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 4)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    if self.hospitalUidFrom is not None:
      oprot.writeFieldBegin('hospitalUidFrom', TType.I32, 5)
      oprot.writeI32(self.hospitalUidFrom)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.patientId is None:
      raise TProtocol.TProtocolException(message='Required field patientId is unset!')
    if self.personId is None:
      raise TProtocol.TProtocolException(message='Required field personId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FindPatientParameters:
  """
  Attributes:
   - lastName
   - firstName
   - patrName
   - birthDate
   - sex
   - identifierType
   - identifier
   - omiPolicy
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'lastName', None, None, ), # 1
    (2, TType.STRING, 'firstName', None, None, ), # 2
    (3, TType.STRING, 'patrName', None, None, ), # 3
    (4, TType.I64, 'birthDate', None, None, ), # 4
    (5, TType.I32, 'sex', None, None, ), # 5
    (6, TType.I32, 'identifierType', None, None, ), # 6
    (7, TType.I32, 'identifier', None, None, ), # 7
    (8, TType.STRING, 'omiPolicy', None, None, ), # 8
  )

  def __init__(self, lastName=None, firstName=None, patrName=None, birthDate=None, sex=None, identifierType=None, identifier=None, omiPolicy=None,):
    self.lastName = lastName
    self.firstName = firstName
    self.patrName = patrName
    self.birthDate = birthDate
    self.sex = sex
    self.identifierType = identifierType
    self.identifier = identifier
    self.omiPolicy = omiPolicy

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.patrName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.birthDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.sex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.identifierType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.identifier = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.omiPolicy = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FindPatientParameters')
    if self.lastName is not None:
      oprot.writeFieldBegin('lastName', TType.STRING, 1)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.firstName is not None:
      oprot.writeFieldBegin('firstName', TType.STRING, 2)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.patrName is not None:
      oprot.writeFieldBegin('patrName', TType.STRING, 3)
      oprot.writeString(self.patrName)
      oprot.writeFieldEnd()
    if self.birthDate is not None:
      oprot.writeFieldBegin('birthDate', TType.I64, 4)
      oprot.writeI64(self.birthDate)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I32, 5)
      oprot.writeI32(self.sex)
      oprot.writeFieldEnd()
    if self.identifierType is not None:
      oprot.writeFieldBegin('identifierType', TType.I32, 6)
      oprot.writeI32(self.identifierType)
      oprot.writeFieldEnd()
    if self.identifier is not None:
      oprot.writeFieldBegin('identifier', TType.I32, 7)
      oprot.writeI32(self.identifier)
      oprot.writeFieldEnd()
    if self.omiPolicy is not None:
      oprot.writeFieldBegin('omiPolicy', TType.STRING, 8)
      oprot.writeString(self.omiPolicy)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.identifier is None:
      raise TProtocol.TProtocolException(message='Required field identifier is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotFoundException(TException):
  """
  Attributes:
   - error_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'error_msg', None, None, ), # 1
  )

  def __init__(self, error_msg=None,):
    self.error_msg = error_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.error_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotFoundException')
    if self.error_msg is not None:
      oprot.writeFieldBegin('error_msg', TType.STRING, 1)
      oprot.writeString(self.error_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SQLException(TException):
  """
  Attributes:
   - error_code
   - error_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error_code', None, None, ), # 1
    (2, TType.STRING, 'error_msg', None, None, ), # 2
  )

  def __init__(self, error_code=None, error_msg=None,):
    self.error_code = error_code
    self.error_msg = error_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SQLException')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.I32, 1)
      oprot.writeI32(self.error_code)
      oprot.writeFieldEnd()
    if self.error_msg is not None:
      oprot.writeFieldBegin('error_msg', TType.STRING, 2)
      oprot.writeString(self.error_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
