# coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def getOrganisationInfo(self, infisCode):
    """
    получение информации об организации(ЛПУ) по ее инфис-коду
    @param infisCode                     1)Инфис-код организации
    @return                              Структуа с информацией об организации
    @throws NotFoundException             когда в БД ЛПУ нету организации с таким инфис-кодом

    Parameters:
     - infisCode
    """
    pass

  def getOrgStructures(self, parent_id, recursive, infisCode):
    """
    Получение списка подразделений, входящих в заданное подразделение
    @param parent_id                     1) идентификатор подразделения, для которого нужно найти дочернии подразделения
    @param recursive                     2) Флаг рекурсии (выбрать также подразделения, входяшие во все дочерние подразделения)
    @param infisCode                     3) Инфис-код
    @return                              Список структур, содержащих информацию о дочерних подразделениях
    @throws NotFoundException             когда не было найдено ни одного подразделения, удовлетворяющего заданным параметрам
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - parent_id
     - recursive
     - infisCode
    """
    pass

  def getAddresses(self, orgStructureId, recursive, infisCode):
    """
    Получение адресов запрошенного подразделения
    @param orgStructureId                1) идетификатор подразделения, для которого требуется найти адреса
    @param recursive                     2) Флаг рекурсии (выбрать также подразделения, входяшие во все дочерние подразделения)
    @param infisCode                     3) Инфис-код
    @return                              Список структур, содержащих информацию об адресах запрошенных подразделений
    @throws NotFoundException             когда не было найдено ни одного адреса подразделения, удовлетворяющего заданным параметрам
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - orgStructureId
     - recursive
     - infisCode
    """
    pass

  def findOrgStructureByAddress(self, params):
    """
    Получение списка идентификаторов подразделений, расположенных по указанному адресу
    @param params                        1) Структура с параметрами поиска подразделений по адресу
    @return                              Список идентификаторов подразделений, приписанных к запрошенному адресу
    @throws NotFoundException             когда не было найдено ни одного подразделения, удовлетворяющего заданным параметрам
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    pass

  def getPersonnel(self, orgStructureId, recursive, infisCode):
    """
    Получение списка персонала, работающего в запрошенном подразделении
    @param orgStructureId                1) идентификатор подразделения
    @param recursive                     2) флаг рекусрии
    @param infisCode                     3) инфис-код
    @return                              Список идентификаторов подразделений, приписанных к запрошенному адресу
    @throws NotFoundException             когда не было найдено ни одного работника, удовлетворяющего заданным параметрам
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - orgStructureId
     - recursive
     - infisCode
    """
    pass

  def getTotalTicketsAvailability(self, params):
    """
    НЕ РЕАЛИЗОВАНО

    Parameters:
     - params
    """
    pass

  def getTicketsAvailability(self, params):
    """
    НЕ РЕАЛИЗОВАНО

    Parameters:
     - params
    """
    pass

  def getWorkTimeAndStatus(self, params):
    """
    Получение расписания врача
    @param params                        1) Структура с параметрами для получения расписания врача
    @return                              Структура с расписанием врача (на запрошенный день)
    @throws NotFoundException             когда не было найдено расписания на запрошенную дату
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    pass

  def addPatient(self, params):
    """
    добавление нового пациента в БД ЛПУ
    @param params                        1) Структура с данными для нового пациента
    @return                              Структура со сведениями о статусе добавления пациента
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    pass

  def findPatient(self, params):
    """
    Поиск пациента в БД ЛПУ по заданным параметрам
    @param params                        1) Структура с данными для поиска единственного пациента
    @return                              Структура с данными о результатах посика пациента
    @throws NotFoundException             //TODO
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    pass

  def findPatients(self, params):
    """
    Поиск пациентов в БД ЛПУ по заданным параметрам
    @param params                        1) Структура с данными для поиска нескольких пациентов
    @return                              Список структур с данными для найденных пациентов
    @throws NotFoundException             //TODO
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    pass

  def findPatientByPolicyAndDocument(self, params):
    """
    Поиск пациента по данным из ТФОМС
    @param params                        1) Параметры поиска
    @return                              Статус нахождения пациента
    @throws NotFoundException            когда не найдено ни одного пациента по заданным параметрам
    @throws InvalidPersonalInfo          когда по полису или документу найдены пациент(ы) в БД ЛПУ, но (ФИО/пол/др) отличаются от переданных
    @throws InvalidDocumentException     когда не найдено совпадений по полису и документу, но пациент с таким (ФИО/пол/др) уже есть в БД ЛПУ
    @throws AnotherPolicyException       когда пациент найден и документы совпали, но его полис отличается от запрошенного
    @throws NotUniqueException           когда по запрошенным параметрам невозможно выделить единственного пациента

    Parameters:
     - params
    """
    pass

  def changePatientPolicy(self, params):
    """
    Добавление/ изменение полиса клиента
    @param params                        1) Параметры для добавления полиса (struct ChangePolicyParameters)
    @return                              успешность замены/добавления полиса
    @throws PolicyTypeNotFoundException  когда нету типа полиса с переданным кодом
    @throws NotFoundException            когда нету пациента с переданным идентификатором

    Parameters:
     - params
    """
    pass

  def checkForNewQueueCoupons(self, ):
    """
     Запрос на список талончиков, которые появились с момента последнего запроса
    (для поиска записей на прием к врачу созданных не через КС)
     @return                              Список новых талончиков или пустой список, если таких талончиков не найдено то пустой список
    """
    pass

  def getFirstFreeTicket(self, params):
    """
    Метод для получения первого свободного талончика врача
    @param params                        1) Параметры для поиска первого свободого талончика
    @return                              Структура с данными первого доступного для записи талончика
    @throws NotFoundException            когда у выьранного врача с этой даты нету свободных талончиков

    Parameters:
     - params
    """
    pass

  def getPersonSchedule(self, params):
    """
    Метод для получения расписания врача пачкой за указанный интервал
    @param params                        1) Параметры для получения расписания
    @return                              map<timestamp, Schedule> - карта вида <[Дата приема], [Расписание на эту дату]>,
                                         в случае отсутствия расписания на указанную дату набор ключ-значение опускается
    @throws NotFoundException            когда нету такого идентификатора врача

    Parameters:
     - params
    """
    pass

  def getPatientInfo(self, patientIds):
    """
    * Получение детальной информации по пациентам по их идентфикаторам
    * @param patientIds                    1) Список идентификаторов пациентов
    * @return                              map<int, PatientInfo> - карта вида <[Идетификатор пациента], [Информация о пациенте]>,
                                           в случае отсутвия идентификатора в БД ЛПУ набор ключ-значение опускается
    * @throws NotFoundException            //TODO
    * @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - patientIds
    """
    pass

  def getPatientContacts(self, patientId):
    """
    Получение контактной информации для заданного пациента
    @param patientIds                    1) идентификатор пациентов
    @return                              Список структур с контактной информацией
    @throws NotFoundException            //TODO
    @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - patientId
    """
    pass

  def getPatientOrgStructures(self, parentId):
    """
    НЕ РЕАЛИЗОВАНО

    Parameters:
     - parentId
    """
    pass

  def enqueuePatient(self, params):
    """
    Запись пациента на прием к врачу
    @param params                        1) Структура с параметрами для  записи на прием к врачу
    @return                              Структура с данными о статусе записи пациента на прием к врачу
    @throws NotFoundException            //TODO
    @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    pass

  def getPatientQueue(self, patientId):
    """
    Получение списка записей на приемы к врачам заданного пациента
    @param patientId                     1) Идентификатор пациента
    @return                              Список структура с данными о записях пациента на приемы к врачам
    @throws NotFoundException            //TODO
    @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - patientId
    """
    pass

  def dequeuePatient(self, patientId, queueId):
    """
    Отмена записи пациента на прием к врачу
    @param patientId                     1) Идентификатор пациента
    @param queueId                       2) Идентификатор записи, которую необходимо отменить
    @return                              Структура с данными о статусе отмены записи пациента на прием к врачу
    @throws NotFoundException            //TODO
    @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - patientId
     - queueId
    """
    pass

  def getSpecialities(self, hospitalUidFrom):
    """
    Получение списка  с информацией о специализациях и доступных талончиках
    @param hospitalUidFrom               1) Инфис-код ЛПУ
    @return                              Список структур с данными о специализациях врачей
    @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - hospitalUidFrom
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getOrganisationInfo(self, infisCode):
    """
    получение информации об организации(ЛПУ) по ее инфис-коду
    @param infisCode                     1)Инфис-код организации
    @return                              Структуа с информацией об организации
    @throws NotFoundException             когда в БД ЛПУ нету организации с таким инфис-кодом

    Parameters:
     - infisCode
    """
    self.send_getOrganisationInfo(infisCode)
    return self.recv_getOrganisationInfo()

  def send_getOrganisationInfo(self, infisCode):
    self._oprot.writeMessageBegin('getOrganisationInfo', TMessageType.CALL, self._seqid)
    args = getOrganisationInfo_args()
    args.infisCode = infisCode
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getOrganisationInfo(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getOrganisationInfo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getOrganisationInfo failed: unknown result");

  def getOrgStructures(self, parent_id, recursive, infisCode):
    """
    Получение списка подразделений, входящих в заданное подразделение
    @param parent_id                     1) идентификатор подразделения, для которого нужно найти дочернии подразделения
    @param recursive                     2) Флаг рекурсии (выбрать также подразделения, входяшие во все дочерние подразделения)
    @param infisCode                     3) Инфис-код
    @return                              Список структур, содержащих информацию о дочерних подразделениях
    @throws NotFoundException             когда не было найдено ни одного подразделения, удовлетворяющего заданным параметрам
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - parent_id
     - recursive
     - infisCode
    """
    self.send_getOrgStructures(parent_id, recursive, infisCode)
    return self.recv_getOrgStructures()

  def send_getOrgStructures(self, parent_id, recursive, infisCode):
    self._oprot.writeMessageBegin('getOrgStructures', TMessageType.CALL, self._seqid)
    args = getOrgStructures_args()
    args.parent_id = parent_id
    args.recursive = recursive
    args.infisCode = infisCode
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getOrgStructures(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getOrgStructures_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getOrgStructures failed: unknown result");

  def getAddresses(self, orgStructureId, recursive, infisCode):
    """
    Получение адресов запрошенного подразделения
    @param orgStructureId                1) идетификатор подразделения, для которого требуется найти адреса
    @param recursive                     2) Флаг рекурсии (выбрать также подразделения, входяшие во все дочерние подразделения)
    @param infisCode                     3) Инфис-код
    @return                              Список структур, содержащих информацию об адресах запрошенных подразделений
    @throws NotFoundException             когда не было найдено ни одного адреса подразделения, удовлетворяющего заданным параметрам
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - orgStructureId
     - recursive
     - infisCode
    """
    self.send_getAddresses(orgStructureId, recursive, infisCode)
    return self.recv_getAddresses()

  def send_getAddresses(self, orgStructureId, recursive, infisCode):
    self._oprot.writeMessageBegin('getAddresses', TMessageType.CALL, self._seqid)
    args = getAddresses_args()
    args.orgStructureId = orgStructureId
    args.recursive = recursive
    args.infisCode = infisCode
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAddresses(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAddresses_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.excsql is not None:
      raise result.excsql
    if result.exc is not None:
      raise result.exc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAddresses failed: unknown result");

  def findOrgStructureByAddress(self, params):
    """
    Получение списка идентификаторов подразделений, расположенных по указанному адресу
    @param params                        1) Структура с параметрами поиска подразделений по адресу
    @return                              Список идентификаторов подразделений, приписанных к запрошенному адресу
    @throws NotFoundException             когда не было найдено ни одного подразделения, удовлетворяющего заданным параметрам
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    self.send_findOrgStructureByAddress(params)
    return self.recv_findOrgStructureByAddress()

  def send_findOrgStructureByAddress(self, params):
    self._oprot.writeMessageBegin('findOrgStructureByAddress', TMessageType.CALL, self._seqid)
    args = findOrgStructureByAddress_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findOrgStructureByAddress(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findOrgStructureByAddress_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findOrgStructureByAddress failed: unknown result");

  def getPersonnel(self, orgStructureId, recursive, infisCode):
    """
    Получение списка персонала, работающего в запрошенном подразделении
    @param orgStructureId                1) идентификатор подразделения
    @param recursive                     2) флаг рекусрии
    @param infisCode                     3) инфис-код
    @return                              Список идентификаторов подразделений, приписанных к запрошенному адресу
    @throws NotFoundException             когда не было найдено ни одного работника, удовлетворяющего заданным параметрам
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - orgStructureId
     - recursive
     - infisCode
    """
    self.send_getPersonnel(orgStructureId, recursive, infisCode)
    return self.recv_getPersonnel()

  def send_getPersonnel(self, orgStructureId, recursive, infisCode):
    self._oprot.writeMessageBegin('getPersonnel', TMessageType.CALL, self._seqid)
    args = getPersonnel_args()
    args.orgStructureId = orgStructureId
    args.recursive = recursive
    args.infisCode = infisCode
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPersonnel(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getPersonnel_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPersonnel failed: unknown result");

  def getTotalTicketsAvailability(self, params):
    """
    НЕ РЕАЛИЗОВАНО

    Parameters:
     - params
    """
    self.send_getTotalTicketsAvailability(params)
    return self.recv_getTotalTicketsAvailability()

  def send_getTotalTicketsAvailability(self, params):
    self._oprot.writeMessageBegin('getTotalTicketsAvailability', TMessageType.CALL, self._seqid)
    args = getTotalTicketsAvailability_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTotalTicketsAvailability(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getTotalTicketsAvailability_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTotalTicketsAvailability failed: unknown result");

  def getTicketsAvailability(self, params):
    """
    НЕ РЕАЛИЗОВАНО

    Parameters:
     - params
    """
    self.send_getTicketsAvailability(params)
    return self.recv_getTicketsAvailability()

  def send_getTicketsAvailability(self, params):
    self._oprot.writeMessageBegin('getTicketsAvailability', TMessageType.CALL, self._seqid)
    args = getTicketsAvailability_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTicketsAvailability(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getTicketsAvailability_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTicketsAvailability failed: unknown result");

  def getWorkTimeAndStatus(self, params):
    """
    Получение расписания врача
    @param params                        1) Структура с параметрами для получения расписания врача
    @return                              Структура с расписанием врача (на запрошенный день)
    @throws NotFoundException             когда не было найдено расписания на запрошенную дату
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    self.send_getWorkTimeAndStatus(params)
    return self.recv_getWorkTimeAndStatus()

  def send_getWorkTimeAndStatus(self, params):
    self._oprot.writeMessageBegin('getWorkTimeAndStatus', TMessageType.CALL, self._seqid)
    args = getWorkTimeAndStatus_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getWorkTimeAndStatus(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getWorkTimeAndStatus_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getWorkTimeAndStatus failed: unknown result");

  def addPatient(self, params):
    """
    добавление нового пациента в БД ЛПУ
    @param params                        1) Структура с данными для нового пациента
    @return                              Структура со сведениями о статусе добавления пациента
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    self.send_addPatient(params)
    return self.recv_addPatient()

  def send_addPatient(self, params):
    self._oprot.writeMessageBegin('addPatient', TMessageType.CALL, self._seqid)
    args = addPatient_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addPatient(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addPatient_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addPatient failed: unknown result");

  def findPatient(self, params):
    """
    Поиск пациента в БД ЛПУ по заданным параметрам
    @param params                        1) Структура с данными для поиска единственного пациента
    @return                              Структура с данными о результатах посика пациента
    @throws NotFoundException             //TODO
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    self.send_findPatient(params)
    return self.recv_findPatient()

  def send_findPatient(self, params):
    self._oprot.writeMessageBegin('findPatient', TMessageType.CALL, self._seqid)
    args = findPatient_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findPatient(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findPatient_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findPatient failed: unknown result");

  def findPatients(self, params):
    """
    Поиск пациентов в БД ЛПУ по заданным параметрам
    @param params                        1) Структура с данными для поиска нескольких пациентов
    @return                              Список структур с данными для найденных пациентов
    @throws NotFoundException             //TODO
    @throws SQLException                  когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    self.send_findPatients(params)
    return self.recv_findPatients()

  def send_findPatients(self, params):
    self._oprot.writeMessageBegin('findPatients', TMessageType.CALL, self._seqid)
    args = findPatients_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findPatients(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findPatients_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findPatients failed: unknown result");

  def findPatientByPolicyAndDocument(self, params):
    """
    Поиск пациента по данным из ТФОМС
    @param params                        1) Параметры поиска
    @return                              Статус нахождения пациента
    @throws NotFoundException            когда не найдено ни одного пациента по заданным параметрам
    @throws InvalidPersonalInfo          когда по полису или документу найдены пациент(ы) в БД ЛПУ, но (ФИО/пол/др) отличаются от переданных
    @throws InvalidDocumentException     когда не найдено совпадений по полису и документу, но пациент с таким (ФИО/пол/др) уже есть в БД ЛПУ
    @throws AnotherPolicyException       когда пациент найден и документы совпали, но его полис отличается от запрошенного
    @throws NotUniqueException           когда по запрошенным параметрам невозможно выделить единственного пациента

    Parameters:
     - params
    """
    self.send_findPatientByPolicyAndDocument(params)
    return self.recv_findPatientByPolicyAndDocument()

  def send_findPatientByPolicyAndDocument(self, params):
    self._oprot.writeMessageBegin('findPatientByPolicyAndDocument', TMessageType.CALL, self._seqid)
    args = findPatientByPolicyAndDocument_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findPatientByPolicyAndDocument(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findPatientByPolicyAndDocument_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nfExc is not None:
      raise result.nfExc
    if result.invInfoExc is not None:
      raise result.invInfoExc
    if result.invDocExc is not None:
      raise result.invDocExc
    if result.anotherPolExc is not None:
      raise result.anotherPolExc
    if result.nUniqueExc is not None:
      raise result.nUniqueExc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findPatientByPolicyAndDocument failed: unknown result");

  def changePatientPolicy(self, params):
    """
    Добавление/ изменение полиса клиента
    @param params                        1) Параметры для добавления полиса (struct ChangePolicyParameters)
    @return                              успешность замены/добавления полиса
    @throws PolicyTypeNotFoundException  когда нету типа полиса с переданным кодом
    @throws NotFoundException            когда нету пациента с переданным идентификатором

    Parameters:
     - params
    """
    self.send_changePatientPolicy(params)
    return self.recv_changePatientPolicy()

  def send_changePatientPolicy(self, params):
    self._oprot.writeMessageBegin('changePatientPolicy', TMessageType.CALL, self._seqid)
    args = changePatientPolicy_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changePatientPolicy(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = changePatientPolicy_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ptnfExc is not None:
      raise result.ptnfExc
    if result.nfExc is not None:
      raise result.nfExc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "changePatientPolicy failed: unknown result");

  def checkForNewQueueCoupons(self, ):
    """
     Запрос на список талончиков, которые появились с момента последнего запроса
    (для поиска записей на прием к врачу созданных не через КС)
     @return                              Список новых талончиков или пустой список, если таких талончиков не найдено то пустой список
    """
    self.send_checkForNewQueueCoupons()
    return self.recv_checkForNewQueueCoupons()

  def send_checkForNewQueueCoupons(self, ):
    self._oprot.writeMessageBegin('checkForNewQueueCoupons', TMessageType.CALL, self._seqid)
    args = checkForNewQueueCoupons_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_checkForNewQueueCoupons(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = checkForNewQueueCoupons_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "checkForNewQueueCoupons failed: unknown result");

  def getFirstFreeTicket(self, params):
    """
    Метод для получения первого свободного талончика врача
    @param params                        1) Параметры для поиска первого свободого талончика
    @return                              Структура с данными первого доступного для записи талончика
    @throws NotFoundException            когда у выьранного врача с этой даты нету свободных талончиков

    Parameters:
     - params
    """
    self.send_getFirstFreeTicket(params)
    return self.recv_getFirstFreeTicket()

  def send_getFirstFreeTicket(self, params):
    self._oprot.writeMessageBegin('getFirstFreeTicket', TMessageType.CALL, self._seqid)
    args = getFirstFreeTicket_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getFirstFreeTicket(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getFirstFreeTicket_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nfExc is not None:
      raise result.nfExc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getFirstFreeTicket failed: unknown result");

  def getPersonSchedule(self, params):
    """
    Метод для получения расписания врача пачкой за указанный интервал
    @param params                        1) Параметры для получения расписания
    @return                              map<timestamp, Schedule> - карта вида <[Дата приема], [Расписание на эту дату]>,
                                         в случае отсутствия расписания на указанную дату набор ключ-значение опускается
    @throws NotFoundException            когда нету такого идентификатора врача

    Parameters:
     - params
    """
    self.send_getPersonSchedule(params)
    return self.recv_getPersonSchedule()

  def send_getPersonSchedule(self, params):
    self._oprot.writeMessageBegin('getPersonSchedule', TMessageType.CALL, self._seqid)
    args = getPersonSchedule_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPersonSchedule(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getPersonSchedule_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nfExc is not None:
      raise result.nfExc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPersonSchedule failed: unknown result");

  def getPatientInfo(self, patientIds):
    """
    * Получение детальной информации по пациентам по их идентфикаторам
    * @param patientIds                    1) Список идентификаторов пациентов
    * @return                              map<int, PatientInfo> - карта вида <[Идетификатор пациента], [Информация о пациенте]>,
                                           в случае отсутвия идентификатора в БД ЛПУ набор ключ-значение опускается
    * @throws NotFoundException            //TODO
    * @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - patientIds
    """
    self.send_getPatientInfo(patientIds)
    return self.recv_getPatientInfo()

  def send_getPatientInfo(self, patientIds):
    self._oprot.writeMessageBegin('getPatientInfo', TMessageType.CALL, self._seqid)
    args = getPatientInfo_args()
    args.patientIds = patientIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPatientInfo(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getPatientInfo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPatientInfo failed: unknown result");

  def getPatientContacts(self, patientId):
    """
    Получение контактной информации для заданного пациента
    @param patientIds                    1) идентификатор пациентов
    @return                              Список структур с контактной информацией
    @throws NotFoundException            //TODO
    @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - patientId
    """
    self.send_getPatientContacts(patientId)
    return self.recv_getPatientContacts()

  def send_getPatientContacts(self, patientId):
    self._oprot.writeMessageBegin('getPatientContacts', TMessageType.CALL, self._seqid)
    args = getPatientContacts_args()
    args.patientId = patientId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPatientContacts(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getPatientContacts_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPatientContacts failed: unknown result");

  def getPatientOrgStructures(self, parentId):
    """
    НЕ РЕАЛИЗОВАНО

    Parameters:
     - parentId
    """
    self.send_getPatientOrgStructures(parentId)
    return self.recv_getPatientOrgStructures()

  def send_getPatientOrgStructures(self, parentId):
    self._oprot.writeMessageBegin('getPatientOrgStructures', TMessageType.CALL, self._seqid)
    args = getPatientOrgStructures_args()
    args.parentId = parentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPatientOrgStructures(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getPatientOrgStructures_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPatientOrgStructures failed: unknown result");

  def enqueuePatient(self, params):
    """
    Запись пациента на прием к врачу
    @param params                        1) Структура с параметрами для  записи на прием к врачу
    @return                              Структура с данными о статусе записи пациента на прием к врачу
    @throws NotFoundException            //TODO
    @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - params
    """
    self.send_enqueuePatient(params)
    return self.recv_enqueuePatient()

  def send_enqueuePatient(self, params):
    self._oprot.writeMessageBegin('enqueuePatient', TMessageType.CALL, self._seqid)
    args = enqueuePatient_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_enqueuePatient(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = enqueuePatient_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "enqueuePatient failed: unknown result");

  def getPatientQueue(self, patientId):
    """
    Получение списка записей на приемы к врачам заданного пациента
    @param patientId                     1) Идентификатор пациента
    @return                              Список структура с данными о записях пациента на приемы к врачам
    @throws NotFoundException            //TODO
    @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - patientId
    """
    self.send_getPatientQueue(patientId)
    return self.recv_getPatientQueue()

  def send_getPatientQueue(self, patientId):
    self._oprot.writeMessageBegin('getPatientQueue', TMessageType.CALL, self._seqid)
    args = getPatientQueue_args()
    args.patientId = patientId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPatientQueue(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getPatientQueue_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPatientQueue failed: unknown result");

  def dequeuePatient(self, patientId, queueId):
    """
    Отмена записи пациента на прием к врачу
    @param patientId                     1) Идентификатор пациента
    @param queueId                       2) Идентификатор записи, которую необходимо отменить
    @return                              Структура с данными о статусе отмены записи пациента на прием к врачу
    @throws NotFoundException            //TODO
    @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - patientId
     - queueId
    """
    self.send_dequeuePatient(patientId, queueId)
    return self.recv_dequeuePatient()

  def send_dequeuePatient(self, patientId, queueId):
    self._oprot.writeMessageBegin('dequeuePatient', TMessageType.CALL, self._seqid)
    args = dequeuePatient_args()
    args.patientId = patientId
    args.queueId = queueId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_dequeuePatient(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = dequeuePatient_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    if result.excsql is not None:
      raise result.excsql
    raise TApplicationException(TApplicationException.MISSING_RESULT, "dequeuePatient failed: unknown result");

  def getSpecialities(self, hospitalUidFrom):
    """
    Получение списка  с информацией о специализациях и доступных талончиках
    @param hospitalUidFrom               1) Инфис-код ЛПУ
    @return                              Список структур с данными о специализациях врачей
    @throws SQLException                 когда произошла внутренняя ошибка при запросах к БД ЛПУ

    Parameters:
     - hospitalUidFrom
    """
    self.send_getSpecialities(hospitalUidFrom)
    return self.recv_getSpecialities()

  def send_getSpecialities(self, hospitalUidFrom):
    self._oprot.writeMessageBegin('getSpecialities', TMessageType.CALL, self._seqid)
    args = getSpecialities_args()
    args.hospitalUidFrom = hospitalUidFrom
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSpecialities(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSpecialities_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.exc is not None:
      raise result.exc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSpecialities failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getOrganisationInfo"] = Processor.process_getOrganisationInfo
    self._processMap["getOrgStructures"] = Processor.process_getOrgStructures
    self._processMap["getAddresses"] = Processor.process_getAddresses
    self._processMap["findOrgStructureByAddress"] = Processor.process_findOrgStructureByAddress
    self._processMap["getPersonnel"] = Processor.process_getPersonnel
    self._processMap["getTotalTicketsAvailability"] = Processor.process_getTotalTicketsAvailability
    self._processMap["getTicketsAvailability"] = Processor.process_getTicketsAvailability
    self._processMap["getWorkTimeAndStatus"] = Processor.process_getWorkTimeAndStatus
    self._processMap["addPatient"] = Processor.process_addPatient
    self._processMap["findPatient"] = Processor.process_findPatient
    self._processMap["findPatients"] = Processor.process_findPatients
    self._processMap["findPatientByPolicyAndDocument"] = Processor.process_findPatientByPolicyAndDocument
    self._processMap["changePatientPolicy"] = Processor.process_changePatientPolicy
    self._processMap["checkForNewQueueCoupons"] = Processor.process_checkForNewQueueCoupons
    self._processMap["getFirstFreeTicket"] = Processor.process_getFirstFreeTicket
    self._processMap["getPersonSchedule"] = Processor.process_getPersonSchedule
    self._processMap["getPatientInfo"] = Processor.process_getPatientInfo
    self._processMap["getPatientContacts"] = Processor.process_getPatientContacts
    self._processMap["getPatientOrgStructures"] = Processor.process_getPatientOrgStructures
    self._processMap["enqueuePatient"] = Processor.process_enqueuePatient
    self._processMap["getPatientQueue"] = Processor.process_getPatientQueue
    self._processMap["dequeuePatient"] = Processor.process_dequeuePatient
    self._processMap["getSpecialities"] = Processor.process_getSpecialities

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getOrganisationInfo(self, seqid, iprot, oprot):
    args = getOrganisationInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getOrganisationInfo_result()
    try:
      result.success = self._handler.getOrganisationInfo(args.infisCode)
    except NotFoundException as exc:
      result.exc = exc
    oprot.writeMessageBegin("getOrganisationInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getOrgStructures(self, seqid, iprot, oprot):
    args = getOrgStructures_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getOrgStructures_result()
    try:
      result.success = self._handler.getOrgStructures(args.parent_id, args.recursive, args.infisCode)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("getOrgStructures", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAddresses(self, seqid, iprot, oprot):
    args = getAddresses_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAddresses_result()
    try:
      result.success = self._handler.getAddresses(args.orgStructureId, args.recursive, args.infisCode)
    except SQLException as excsql:
      result.excsql = excsql
    except NotFoundException as exc:
      result.exc = exc
    oprot.writeMessageBegin("getAddresses", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findOrgStructureByAddress(self, seqid, iprot, oprot):
    args = findOrgStructureByAddress_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findOrgStructureByAddress_result()
    try:
      result.success = self._handler.findOrgStructureByAddress(args.params)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("findOrgStructureByAddress", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPersonnel(self, seqid, iprot, oprot):
    args = getPersonnel_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPersonnel_result()
    try:
      result.success = self._handler.getPersonnel(args.orgStructureId, args.recursive, args.infisCode)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("getPersonnel", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTotalTicketsAvailability(self, seqid, iprot, oprot):
    args = getTotalTicketsAvailability_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTotalTicketsAvailability_result()
    try:
      result.success = self._handler.getTotalTicketsAvailability(args.params)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("getTotalTicketsAvailability", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTicketsAvailability(self, seqid, iprot, oprot):
    args = getTicketsAvailability_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTicketsAvailability_result()
    try:
      result.success = self._handler.getTicketsAvailability(args.params)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("getTicketsAvailability", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWorkTimeAndStatus(self, seqid, iprot, oprot):
    args = getWorkTimeAndStatus_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWorkTimeAndStatus_result()
    try:
      result.success = self._handler.getWorkTimeAndStatus(args.params)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("getWorkTimeAndStatus", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addPatient(self, seqid, iprot, oprot):
    args = addPatient_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addPatient_result()
    try:
      result.success = self._handler.addPatient(args.params)
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("addPatient", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findPatient(self, seqid, iprot, oprot):
    args = findPatient_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findPatient_result()
    try:
      result.success = self._handler.findPatient(args.params)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("findPatient", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findPatients(self, seqid, iprot, oprot):
    args = findPatients_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findPatients_result()
    try:
      result.success = self._handler.findPatients(args.params)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("findPatients", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findPatientByPolicyAndDocument(self, seqid, iprot, oprot):
    args = findPatientByPolicyAndDocument_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findPatientByPolicyAndDocument_result()
    try:
      result.success = self._handler.findPatientByPolicyAndDocument(args.params)
    except NotFoundException as nfExc:
      result.nfExc = nfExc
    except InvalidPersonalInfoException as invInfoExc:
      result.invInfoExc = invInfoExc
    except InvalidDocumentException as invDocExc:
      result.invDocExc = invDocExc
    except AnotherPolicyException as anotherPolExc:
      result.anotherPolExc = anotherPolExc
    except NotUniqueException as nUniqueExc:
      result.nUniqueExc = nUniqueExc
    oprot.writeMessageBegin("findPatientByPolicyAndDocument", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changePatientPolicy(self, seqid, iprot, oprot):
    args = changePatientPolicy_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changePatientPolicy_result()
    try:
      result.success = self._handler.changePatientPolicy(args.params)
    except PolicyTypeNotFoundException as ptnfExc:
      result.ptnfExc = ptnfExc
    except NotFoundException as nfExc:
      result.nfExc = nfExc
    oprot.writeMessageBegin("changePatientPolicy", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_checkForNewQueueCoupons(self, seqid, iprot, oprot):
    args = checkForNewQueueCoupons_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = checkForNewQueueCoupons_result()
    result.success = self._handler.checkForNewQueueCoupons()
    oprot.writeMessageBegin("checkForNewQueueCoupons", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getFirstFreeTicket(self, seqid, iprot, oprot):
    args = getFirstFreeTicket_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getFirstFreeTicket_result()
    try:
      result.success = self._handler.getFirstFreeTicket(args.params)
    except NotFoundException as nfExc:
      result.nfExc = nfExc
    oprot.writeMessageBegin("getFirstFreeTicket", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPersonSchedule(self, seqid, iprot, oprot):
    args = getPersonSchedule_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPersonSchedule_result()
    try:
      result.success = self._handler.getPersonSchedule(args.params)
    except NotFoundException as nfExc:
      result.nfExc = nfExc
    oprot.writeMessageBegin("getPersonSchedule", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPatientInfo(self, seqid, iprot, oprot):
    args = getPatientInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPatientInfo_result()
    try:
      result.success = self._handler.getPatientInfo(args.patientIds)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("getPatientInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPatientContacts(self, seqid, iprot, oprot):
    args = getPatientContacts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPatientContacts_result()
    try:
      result.success = self._handler.getPatientContacts(args.patientId)
    except NotFoundException as exc:
      result.exc = exc
    oprot.writeMessageBegin("getPatientContacts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPatientOrgStructures(self, seqid, iprot, oprot):
    args = getPatientOrgStructures_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPatientOrgStructures_result()
    try:
      result.success = self._handler.getPatientOrgStructures(args.parentId)
    except NotFoundException as exc:
      result.exc = exc
    oprot.writeMessageBegin("getPatientOrgStructures", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_enqueuePatient(self, seqid, iprot, oprot):
    args = enqueuePatient_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = enqueuePatient_result()
    try:
      result.success = self._handler.enqueuePatient(args.params)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("enqueuePatient", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPatientQueue(self, seqid, iprot, oprot):
    args = getPatientQueue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPatientQueue_result()
    try:
      result.success = self._handler.getPatientQueue(args.patientId)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("getPatientQueue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_dequeuePatient(self, seqid, iprot, oprot):
    args = dequeuePatient_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = dequeuePatient_result()
    try:
      result.success = self._handler.dequeuePatient(args.patientId, args.queueId)
    except NotFoundException as exc:
      result.exc = exc
    except SQLException as excsql:
      result.excsql = excsql
    oprot.writeMessageBegin("dequeuePatient", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSpecialities(self, seqid, iprot, oprot):
    args = getSpecialities_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSpecialities_result()
    try:
      result.success = self._handler.getSpecialities(args.hospitalUidFrom)
    except SQLException as exc:
      result.exc = exc
    oprot.writeMessageBegin("getSpecialities", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getOrganisationInfo_args(object):
  """
  Attributes:
   - infisCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'infisCode', None, None, ), # 1
  )

  def __init__(self, infisCode=None,):
    self.infisCode = infisCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.infisCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getOrganisationInfo_args')
    if self.infisCode is not None:
      oprot.writeFieldBegin('infisCode', TType.STRING, 1)
      oprot.writeString(self.infisCode.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getOrganisationInfo_result(object):
  """
  Attributes:
   - success
   - exc
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Organization, Organization.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exc=None,):
    self.success = success
    self.exc = exc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Organization()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getOrganisationInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getOrgStructures_args(object):
  """
  Attributes:
   - parent_id
   - recursive
   - infisCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'parent_id', None, None, ), # 1
    (2, TType.BOOL, 'recursive', None, None, ), # 2
    (3, TType.STRING, 'infisCode', None, None, ), # 3
  )

  def __init__(self, parent_id=None, recursive=None, infisCode=None,):
    self.parent_id = parent_id
    self.recursive = recursive
    self.infisCode = infisCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.parent_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.recursive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.infisCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getOrgStructures_args')
    if self.parent_id is not None:
      oprot.writeFieldBegin('parent_id', TType.I32, 1)
      oprot.writeI32(self.parent_id)
      oprot.writeFieldEnd()
    if self.recursive is not None:
      oprot.writeFieldBegin('recursive', TType.BOOL, 2)
      oprot.writeBool(self.recursive)
      oprot.writeFieldEnd()
    if self.infisCode is not None:
      oprot.writeFieldBegin('infisCode', TType.STRING, 3)
      oprot.writeString(self.infisCode.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getOrgStructures_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(OrgStructure, OrgStructure.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = OrgStructure()
            _elem37.read(iprot)
            self.success.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getOrgStructures_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter38 in self.success:
        iter38.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAddresses_args(object):
  """
  Attributes:
   - orgStructureId
   - recursive
   - infisCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'orgStructureId', None, None, ), # 1
    (2, TType.BOOL, 'recursive', None, None, ), # 2
    (3, TType.STRING, 'infisCode', None, None, ), # 3
  )

  def __init__(self, orgStructureId=None, recursive=None, infisCode=None,):
    self.orgStructureId = orgStructureId
    self.recursive = recursive
    self.infisCode = infisCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.orgStructureId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.recursive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.infisCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAddresses_args')
    if self.orgStructureId is not None:
      oprot.writeFieldBegin('orgStructureId', TType.I32, 1)
      oprot.writeI32(self.orgStructureId)
      oprot.writeFieldEnd()
    if self.recursive is not None:
      oprot.writeFieldBegin('recursive', TType.BOOL, 2)
      oprot.writeBool(self.recursive)
      oprot.writeFieldEnd()
    if self.infisCode is not None:
      oprot.writeFieldBegin('infisCode', TType.STRING, 3)
      oprot.writeString(self.infisCode.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAddresses_result(object):
  """
  Attributes:
   - success
   - excsql
   - exc
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Address, Address.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, excsql=None, exc=None,):
    self.success = success
    self.excsql = excsql
    self.exc = exc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = Address()
            _elem44.read(iprot)
            self.success.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAddresses_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter45 in self.success:
        iter45.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 1)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 2)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findOrgStructureByAddress_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (FindOrgStructureByAddressParameters, FindOrgStructureByAddressParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = FindOrgStructureByAddressParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findOrgStructureByAddress_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findOrgStructureByAddress_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype49, _size46) = iprot.readListBegin()
          for _i50 in xrange(_size46):
            _elem51 = iprot.readI32();
            self.success.append(_elem51)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findOrgStructureByAddress_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter52 in self.success:
        oprot.writeI32(iter52)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPersonnel_args(object):
  """
  Attributes:
   - orgStructureId
   - recursive
   - infisCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'orgStructureId', None, None, ), # 1
    (2, TType.BOOL, 'recursive', None, None, ), # 2
    (3, TType.STRING, 'infisCode', None, None, ), # 3
  )

  def __init__(self, orgStructureId=None, recursive=None, infisCode=None,):
    self.orgStructureId = orgStructureId
    self.recursive = recursive
    self.infisCode = infisCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.orgStructureId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.recursive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.infisCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPersonnel_args')
    if self.orgStructureId is not None:
      oprot.writeFieldBegin('orgStructureId', TType.I32, 1)
      oprot.writeI32(self.orgStructureId)
      oprot.writeFieldEnd()
    if self.recursive is not None:
      oprot.writeFieldBegin('recursive', TType.BOOL, 2)
      oprot.writeBool(self.recursive)
      oprot.writeFieldEnd()
    if self.infisCode is not None:
      oprot.writeFieldBegin('infisCode', TType.STRING, 3)
      oprot.writeString(self.infisCode.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPersonnel_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Person, Person.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype56, _size53) = iprot.readListBegin()
          for _i57 in xrange(_size53):
            _elem58 = Person()
            _elem58.read(iprot)
            self.success.append(_elem58)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPersonnel_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter59 in self.success:
        iter59.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTotalTicketsAvailability_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (GetTicketsAvailabilityParameters, GetTicketsAvailabilityParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = GetTicketsAvailabilityParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTotalTicketsAvailability_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTotalTicketsAvailability_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TicketsAvailability, TicketsAvailability.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TicketsAvailability()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTotalTicketsAvailability_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTicketsAvailability_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (GetTicketsAvailabilityParameters, GetTicketsAvailabilityParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = GetTicketsAvailabilityParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTicketsAvailability_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTicketsAvailability_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(ExtendedTicketsAvailability, ExtendedTicketsAvailability.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype63, _size60) = iprot.readListBegin()
          for _i64 in xrange(_size60):
            _elem65 = ExtendedTicketsAvailability()
            _elem65.read(iprot)
            self.success.append(_elem65)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTicketsAvailability_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter66 in self.success:
        iter66.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWorkTimeAndStatus_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (GetTimeWorkAndStatusParameters, GetTimeWorkAndStatusParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = GetTimeWorkAndStatusParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWorkTimeAndStatus_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWorkTimeAndStatus_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Amb, Amb.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Amb()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWorkTimeAndStatus_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addPatient_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (AddPatientParameters, AddPatientParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = AddPatientParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addPatient_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addPatient_result(object):
  """
  Attributes:
   - success
   - excsql
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PatientStatus, PatientStatus.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, excsql=None,):
    self.success = success
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PatientStatus()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addPatient_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 1)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findPatient_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (FindPatientParameters, FindPatientParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = FindPatientParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findPatient_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findPatient_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PatientStatus, PatientStatus.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PatientStatus()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findPatient_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findPatients_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (FindMultiplePatientsParameters, FindMultiplePatientsParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = FindMultiplePatientsParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findPatients_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findPatients_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Patient, Patient.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype70, _size67) = iprot.readListBegin()
          for _i71 in xrange(_size67):
            _elem72 = Patient()
            _elem72.read(iprot)
            self.success.append(_elem72)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findPatients_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter73 in self.success:
        iter73.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findPatientByPolicyAndDocument_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (FindPatientByPolicyAndDocumentParameters, FindPatientByPolicyAndDocumentParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = FindPatientByPolicyAndDocumentParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findPatientByPolicyAndDocument_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findPatientByPolicyAndDocument_result(object):
  """
  Attributes:
   - success
   - nfExc
   - invInfoExc
   - invDocExc
   - anotherPolExc
   - nUniqueExc
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PatientStatus, PatientStatus.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nfExc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'invInfoExc', (InvalidPersonalInfoException, InvalidPersonalInfoException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'invDocExc', (InvalidDocumentException, InvalidDocumentException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'anotherPolExc', (AnotherPolicyException, AnotherPolicyException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'nUniqueExc', (NotUniqueException, NotUniqueException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, nfExc=None, invInfoExc=None, invDocExc=None, anotherPolExc=None, nUniqueExc=None,):
    self.success = success
    self.nfExc = nfExc
    self.invInfoExc = invInfoExc
    self.invDocExc = invDocExc
    self.anotherPolExc = anotherPolExc
    self.nUniqueExc = nUniqueExc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PatientStatus()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nfExc = NotFoundException()
          self.nfExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.invInfoExc = InvalidPersonalInfoException()
          self.invInfoExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.invDocExc = InvalidDocumentException()
          self.invDocExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.anotherPolExc = AnotherPolicyException()
          self.anotherPolExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.nUniqueExc = NotUniqueException()
          self.nUniqueExc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findPatientByPolicyAndDocument_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nfExc is not None:
      oprot.writeFieldBegin('nfExc', TType.STRUCT, 1)
      self.nfExc.write(oprot)
      oprot.writeFieldEnd()
    if self.invInfoExc is not None:
      oprot.writeFieldBegin('invInfoExc', TType.STRUCT, 2)
      self.invInfoExc.write(oprot)
      oprot.writeFieldEnd()
    if self.invDocExc is not None:
      oprot.writeFieldBegin('invDocExc', TType.STRUCT, 3)
      self.invDocExc.write(oprot)
      oprot.writeFieldEnd()
    if self.anotherPolExc is not None:
      oprot.writeFieldBegin('anotherPolExc', TType.STRUCT, 4)
      self.anotherPolExc.write(oprot)
      oprot.writeFieldEnd()
    if self.nUniqueExc is not None:
      oprot.writeFieldBegin('nUniqueExc', TType.STRUCT, 5)
      self.nUniqueExc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changePatientPolicy_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (ChangePolicyParameters, ChangePolicyParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = ChangePolicyParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changePatientPolicy_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changePatientPolicy_result(object):
  """
  Attributes:
   - success
   - ptnfExc
   - nfExc
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ptnfExc', (PolicyTypeNotFoundException, PolicyTypeNotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'nfExc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ptnfExc=None, nfExc=None,):
    self.success = success
    self.ptnfExc = ptnfExc
    self.nfExc = nfExc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ptnfExc = PolicyTypeNotFoundException()
          self.ptnfExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nfExc = NotFoundException()
          self.nfExc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changePatientPolicy_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ptnfExc is not None:
      oprot.writeFieldBegin('ptnfExc', TType.STRUCT, 1)
      self.ptnfExc.write(oprot)
      oprot.writeFieldEnd()
    if self.nfExc is not None:
      oprot.writeFieldBegin('nfExc', TType.STRUCT, 2)
      self.nfExc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class checkForNewQueueCoupons_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('checkForNewQueueCoupons_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class checkForNewQueueCoupons_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(QueueCoupon, QueueCoupon.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype77, _size74) = iprot.readListBegin()
          for _i78 in xrange(_size74):
            _elem79 = QueueCoupon()
            _elem79.read(iprot)
            self.success.append(_elem79)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('checkForNewQueueCoupons_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter80 in self.success:
        iter80.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getFirstFreeTicket_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (ScheduleParameters, ScheduleParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = ScheduleParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getFirstFreeTicket_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getFirstFreeTicket_result(object):
  """
  Attributes:
   - success
   - nfExc
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TTicket, TTicket.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nfExc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, nfExc=None,):
    self.success = success
    self.nfExc = nfExc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TTicket()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nfExc = NotFoundException()
          self.nfExc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getFirstFreeTicket_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nfExc is not None:
      oprot.writeFieldBegin('nfExc', TType.STRUCT, 1)
      self.nfExc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPersonSchedule_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (ScheduleParameters, ScheduleParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = ScheduleParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPersonSchedule_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPersonSchedule_result(object):
  """
  Attributes:
   - success
   - nfExc
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(Schedule, Schedule.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'nfExc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, nfExc=None,):
    self.success = success
    self.nfExc = nfExc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype82, _vtype83, _size81 ) = iprot.readMapBegin() 
          for _i85 in xrange(_size81):
            _key86 = iprot.readI64();
            _val87 = Schedule()
            _val87.read(iprot)
            self.success[_key86] = _val87
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nfExc = NotFoundException()
          self.nfExc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPersonSchedule_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter88,viter89 in self.success.items():
        oprot.writeI64(kiter88)
        viter89.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.nfExc is not None:
      oprot.writeFieldBegin('nfExc', TType.STRUCT, 1)
      self.nfExc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPatientInfo_args(object):
  """
  Attributes:
   - patientIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'patientIds', (TType.I32,None), None, ), # 1
  )

  def __init__(self, patientIds=None,):
    self.patientIds = patientIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.patientIds = []
          (_etype93, _size90) = iprot.readListBegin()
          for _i94 in xrange(_size90):
            _elem95 = iprot.readI32();
            self.patientIds.append(_elem95)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPatientInfo_args')
    if self.patientIds is not None:
      oprot.writeFieldBegin('patientIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.patientIds))
      for iter96 in self.patientIds:
        oprot.writeI32(iter96)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPatientInfo_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.STRUCT,(PatientInfo, PatientInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype98, _vtype99, _size97 ) = iprot.readMapBegin() 
          for _i101 in xrange(_size97):
            _key102 = iprot.readI32();
            _val103 = PatientInfo()
            _val103.read(iprot)
            self.success[_key102] = _val103
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPatientInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.success))
      for kiter104,viter105 in self.success.items():
        oprot.writeI32(kiter104)
        viter105.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPatientContacts_args(object):
  """
  Attributes:
   - patientId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'patientId', None, None, ), # 1
  )

  def __init__(self, patientId=None,):
    self.patientId = patientId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPatientContacts_args')
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 1)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPatientContacts_result(object):
  """
  Attributes:
   - success
   - exc
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Contact, Contact.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exc=None,):
    self.success = success
    self.exc = exc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype109, _size106) = iprot.readListBegin()
          for _i110 in xrange(_size106):
            _elem111 = Contact()
            _elem111.read(iprot)
            self.success.append(_elem111)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPatientContacts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter112 in self.success:
        iter112.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPatientOrgStructures_args(object):
  """
  Attributes:
   - parentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'parentId', None, None, ), # 1
  )

  def __init__(self, parentId=None,):
    self.parentId = parentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.parentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPatientOrgStructures_args')
    if self.parentId is not None:
      oprot.writeFieldBegin('parentId', TType.I32, 1)
      oprot.writeI32(self.parentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPatientOrgStructures_result(object):
  """
  Attributes:
   - success
   - exc
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(OrgStructuresProperties, OrgStructuresProperties.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exc=None,):
    self.success = success
    self.exc = exc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype116, _size113) = iprot.readListBegin()
          for _i117 in xrange(_size113):
            _elem118 = OrgStructuresProperties()
            _elem118.read(iprot)
            self.success.append(_elem118)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPatientOrgStructures_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter119 in self.success:
        iter119.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueuePatient_args(object):
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'params', (EnqueuePatientParameters, EnqueuePatientParameters.thrift_spec), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.params = EnqueuePatientParameters()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueuePatient_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 1)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enqueuePatient_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (EnqueuePatientStatus, EnqueuePatientStatus.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = EnqueuePatientStatus()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enqueuePatient_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPatientQueue_args(object):
  """
  Attributes:
   - patientId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'patientId', None, None, ), # 1
  )

  def __init__(self, patientId=None,):
    self.patientId = patientId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPatientQueue_args')
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 1)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPatientQueue_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Queue, Queue.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype123, _size120) = iprot.readListBegin()
          for _i124 in xrange(_size120):
            _elem125 = Queue()
            _elem125.read(iprot)
            self.success.append(_elem125)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPatientQueue_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter126 in self.success:
        iter126.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class dequeuePatient_args(object):
  """
  Attributes:
   - patientId
   - queueId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'patientId', None, None, ), # 1
    (2, TType.I32, 'queueId', None, None, ), # 2
  )

  def __init__(self, patientId=None, queueId=None,):
    self.patientId = patientId
    self.queueId = queueId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.queueId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('dequeuePatient_args')
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 1)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    if self.queueId is not None:
      oprot.writeFieldBegin('queueId', TType.I32, 2)
      oprot.writeI32(self.queueId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class dequeuePatient_result(object):
  """
  Attributes:
   - success
   - exc
   - excsql
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DequeuePatientStatus, DequeuePatientStatus.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'excsql', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, exc=None, excsql=None,):
    self.success = success
    self.exc = exc
    self.excsql = excsql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DequeuePatientStatus()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.excsql = SQLException()
          self.excsql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('dequeuePatient_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    if self.excsql is not None:
      oprot.writeFieldBegin('excsql', TType.STRUCT, 2)
      self.excsql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSpecialities_args(object):
  """
  Attributes:
   - hospitalUidFrom
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hospitalUidFrom', None, None, ), # 1
  )

  def __init__(self, hospitalUidFrom=None,):
    self.hospitalUidFrom = hospitalUidFrom

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hospitalUidFrom = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSpecialities_args')
    if self.hospitalUidFrom is not None:
      oprot.writeFieldBegin('hospitalUidFrom', TType.STRING, 1)
      oprot.writeString(self.hospitalUidFrom.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSpecialities_result(object):
  """
  Attributes:
   - success
   - exc
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Speciality, Speciality.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'exc', (SQLException, SQLException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, exc=None,):
    self.success = success
    self.exc = exc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype130, _size127) = iprot.readListBegin()
          for _i131 in xrange(_size127):
            _elem132 = Speciality()
            _elem132.read(iprot)
            self.success.append(_elem132)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.exc = SQLException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSpecialities_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter133 in self.success:
        iter133.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 1)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
